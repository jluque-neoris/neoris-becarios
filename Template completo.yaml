AWSTemplateFormatVersion: '2010-09-09'
Description: YAML template for AWS

Parameters:
  # References to the existing resources in AWS 
  VPC:
    Type: AWS::EC2::VPC::Id
    Default: vpc-03fdd3b33e6bc9591
    Description: ID of Jaime's VPC where I will locate my resources
  PublicSubnet1A:
    Type: AWS::EC2::Subnet::Id
    Default: subnet-05a69f75c7584847b
    Description: ID of the public subnet in eu-west-1a AZ where I will create my EC2
      instance
  PublicSubnet1B:
    Type: AWS::EC2::Subnet::Id
    Default: subnet-0b2f22ba72d34584b
    Description: ID of the public subnet in eu-west-1b AZ where I will create my EC2
      instance
  AvailabilityZone1A:
    Type: String # Not sure about this field
    Default: eu-west-1a
    Description: Availability zone where I want to locate my resources
  AvailabilityZone1B:
    Type: String # Not sure about this field
    Default: eu-west-1b
    Description: Availability zone where I want to locate my resources
  OwnerTagName:
    Type: String # Not sure about this field
    Default: Alfredo_Cuadrado
    Description: Tag to identify the resources that I have created
  MyIP:
    Type: String # Not sure about this field
    Default: 87.221.26.110/32
    Description: My public IP address

Resources:
  # New resources for the VPC
  SecurityGroup1A:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: srs-cloud-sandbox-aca-sg-1A
      GroupDescription: Security group for EC2 instance in 1A
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '22' # Port 22 for SSH protocol
          ToPort: '22'
          CidrIp: !Ref MyIP
        - IpProtocol: tcp
          FromPort: '80' # Port 80 for HTTP protocol
          ToPort: '80'
          CidrIp: !Ref MyIP
      Tags:
        - Key: owner
          Value: !Ref OwnerTagName
  SecurityGroup1B:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: srs-cloud-sandbox-aca-sg-1B
      GroupDescription: Security group for EC2 instance in 1B
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '22' # Port 22 for SSH protocol
          ToPort: '22'
          CidrIp: !Ref MyIP
        - IpProtocol: tcp
          FromPort: '80' # Port 80 for HTTP protocol
          ToPort: '80'
          CidrIp: !Ref MyIP
      Tags:
        - Key: owner
          Value: !Ref OwnerTagName
  EFSSecurityGroup:
    DependsOn: !Ref SecurityGroup1A
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: srs-cloud-sandbox-aca-efs-sg
      GroupDescription: Security group for EFS created in 1A
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '2049'
          ToPort: '2049'
          SourceSecurityGroupId: !GetAtt SecurityGroup1A.GroupId
      Tags:
        - Key: Owner
          Value: !Ref OwnerTagName
  ELBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: srs-cloud-sandbox-aca-elb-sg
      GroupDescription: Security group for ELB
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '80' # Port 80 for HTTP protocol
          ToPort: '80'
          CidrIp: !Ref MyIP
      Tags:
        - Key: owner
          Value: !Ref OwnerTagName
  PublicEC21A:
    # EC2 for the subnet in 1A AZ
    Type: AWS::EC2::Instance
    Properties:
      ImageId: ami-0f007bf1d5c770c6e # Amazon-Linux EC2 type
      InstanceType: t2.micro
      KeyName: clavesalfredo # My key
      SubnetId: !Ref PublicSubnet1A
      AvailabilityZone: !Ref AvailabilityZone1A
      SecurityGroupIds:
        - !Ref SecurityGroup1A
      Tags:
        - Key: Owner
          Value: !Ref OwnerTagName
        - Key: Name
          Value: srs-cloud-sandbox-aca-ec2-1A
  PublicEC21B:
    # EC2 for the subnet in 1B AZ
    Type: AWS::EC2::Instance
    Properties:
      ImageId: ami-0f007bf1d5c770c6e # Amazon-Linux EC2 type
      InstanceType: t2.micro
      KeyName: clavesalfredo # My key
      SubnetId: !Ref PublicSubnet1B
      AvailabilityZone: !Ref AvailabilityZone1B
      SecurityGroupIds:
        - !Ref SecurityGroup1B
      Tags:
        - Key: Owner
          Value: !Ref OwnerTagName
        - Key: Name
          Value: srs-cloud-sandbox-aca-ec2-1B
      UserData:
        #Script to initiate web server in the EC2 instance
        !Base64 |
        #!/bin/bash
        yum update -y
        yum install -y httpd
        systemctl start httpd
        systemctl enable httpd
        echo "<h1>Ejercicio de aplicaci√≥n web en EC2</h1>" > /var/www/html/index.html
  EBS:
    # EBS volume for EC2 in 1B AZ
    Type: AWS::EC2::Volume
    Properties:
      AvailabilityZone: !Ref AvailabilityZone1B
      Size: 8
      VolumeType: gp2
      Tags:
        - Key: Owner
          Value: !Ref OwnerTagName
        - Key: Name
          Value: srs-cloud-sandbox-aca-ebs1B
  EBSVolumeAttachment:
    #Attachment of EBS volume to EC2 instance in EU-West-1B AZ
    Type: AWS::EC2::VolumeAttachment
    Properties:
      InstanceId: !Ref PublicEC21B
      VolumeId: !Ref EBS
      Device: /dev/sdf
  EFS:
    # EFS volume
    Type: AWS::EFS::FileSystem
    Properties:
      AvailabilityZoneName: !Ref AvailabilityZone1A
      PerformanceMode: generalPurpose
      Encrypted: 'false'
      FileSystemTags:
        - Key: Owner
          Value: !Ref OwnerTagName
        - Key: Name
          Value: srs-cloud-sandbox-aca-efs
  EFSMountTarget:
    Type: AWS::EFS::MountTarget
    Properties:
      FileSystemId: !Ref EFS
      SecurityGroups: !Ref EFSSecurityGroup
      SubnetId: !Ref PublicSubnet1A
  ELB:
    # ELB for mi EC2 instances in 1A and 1B AZ's
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: srs-cloud-sandbox-aca-elb
      SecurityGroups:
        - !Ref ELBSecurityGroup
      Scheme: internet-facing
      Subnets:
        - !Ref PublicSubnet1A
        - !Ref PublicSubnet1B
      Tags:
        - Key: Owner
          Value: !Ref OwnerTagName
  ELBTargetGroup:
    # ELB target group thar references to my EC2 instances in AZ 1A & 1B
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckEnabled: 'true'
      HealthCheckIntervalSeconds: 10
      HealthCheckPort: 80
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      IpAddressType: !Ref MyIP
      Name: srs-cloud-sandbox-aca-elbtargetgroup
      Port: 80
      Protocol: HTTP
      Tags:
        - Key: Owner
          Value: !Ref OwnerTagName
      Targets:
        - Id: !Ref PublicEC21A
        - Id: !Ref PublicEC21B
      TargetType: Instance
      UnhealthyThresholdCount: 3
      VpcId: !Ref VPC
  ELBListener:
    # ELB Listener for my ELB
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref ELB
      Port: 80
      Protocol: HTTP
      Default actions:
        - TargetGroupArn: !Ref ELBTargetGroup